#####################################   SQL SERVER BUILD VERSION  ##########################################
<#
Nome da função: Get-SQLBuildVersion
Projeto.......: SCRIPTS
Versão........: 1.0.0.0
------------------------------------------------------------------------------------------------------------

PowerShell 3.0 e superiores.

------------------------------------------------------------------------------------------------------------
Id		Autor                      Versão	      Data                            Descrição
------------------------------------------------------------------------------------------------------------
1		Reginaldo da Cruz Silva   1.0.0.1		10/09/2018                    Criação do script .

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
												PARAMETROS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 PARAMETRO									DESCRIÇÃO 
 
$VersionNumber				- Parametro obrigatório, informar um numero de build com no minimo 5 caracteres, 
                              exemplo: 13.00.1601
												
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Conecta no blog https://buildnumbers.wordpress.com/sqlserver/ e captura a tabela referente a build informada.

#>

function Get-SQLBuildVersion{
#Exige parâmetro
param(

    [Parameter(Mandatory = $true)]

    [string] $VersionNumber

)

   #Carrega página de dados para a váriavel $data_page
   $data_page = Invoke-WebRequest "https://buildnumbers.wordpress.com/sqlserver/" -Verbose:$false
   
   #Extrai todas as tabelas da pagina e carrega num formato de Dataset, semelhante ao dataset C#.
   $data_tables = @($data_page.ParsedHtml.getElementsByTagName("TABLE"))
   
   #Carrega apenas a primeira tabela do dataset, pois é a unica que precisamos
   $first_table = $data_tables[0]
   
   #Cria array para armazenar o cabeçalho da tabela
   $headers = @()
   
   #Carrega todas as linhas da tabela para a várial $data_rows
   $data_rows = @($first_table.Rows)
   
   #váriavel controle para parar o loop
   $return = $false
   
   #Loop para identifcar a versão informada
   foreach($r in $data_rows)   
   {
       #Extrai celulas da linha posicionada
       $cell = @($r.Cells)
   
       #Adiciona headers no padrão Col1, col2, col3...
       if(-not $headers)
       {
           $headers = @(1..($cell.Count + 2) | % { "C$_" })
       }
   
       #Troca nome das colunas com o mapeamento abaixo:
       for ($i = 0; $i -lt $headers.Count; $i++)
       {
           $headers[$i] = $headers[$i].ToString().Replace("C1","Version").ToString().Replace("C2","RTM").ToString().Replace("C3","SP1").ToString().Replace("C4","SP2").ToString().Replace("C5","SP3").ToString().Replace("C6","SP4").ToString().Replace("C7","Latest")
       }
   
       $resultObject = [Ordered] @{}
   
       for($i = 0; $i -lt $cell.Count; $i++)
       {
           $title = $headers[$i]
   
           if(-not $title) { continue }       
   
           $resultObject[$title] = ("" + $cell[$i].InnerText).Trim()
       }
   
       #busca a build informada no array
       foreach ($obj in $resultObject.Values)
       {
           if($obj.Contains($VersionNumber.Substring(0,5)))
           {
               $return =$true
           }
       }
   
       #se encontrou a build para o loop
       if($return)
       {
           [PSCustomObject] $resultObject
           break
       }
   }
}

